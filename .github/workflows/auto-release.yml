name: Auto Release on Main

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/**'
      - 'tests/**'
      - 'dashboards/**'

permissions:
  contents: write

jobs:
  auto-release:
    name: Auto Create Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if version needs update
        id: check_version
        run: |
          # Get current version from manifest.json
          CURRENT_VERSION=$(jq -r '.version' custom_components/battery_energy_trading/manifest.json)
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          # Check if tag already exists
          if git rev-parse "v$CURRENT_VERSION" >/dev/null 2>&1; then
            echo "NEEDS_RELEASE=false" >> $GITHUB_OUTPUT
            echo "Tag v$CURRENT_VERSION already exists, skipping release"
          else
            echo "NEEDS_RELEASE=true" >> $GITHUB_OUTPUT
            echo "No tag for v$CURRENT_VERSION, will create release"
          fi

      - name: Get commit messages since last tag
        if: steps.check_version.outputs.NEEDS_RELEASE == 'true'
        id: get_commits
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LATEST_TAG" ]; then
            echo "No previous tags found, this is the first release"
            COMMITS=$(git log --pretty=format:"- %s" --no-merges)
          else
            echo "Latest tag: $LATEST_TAG"
            COMMITS=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s" --no-merges)
          fi

          # Save commits to output
          echo "COMMITS<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Determine release type from commit messages
          if echo "$COMMITS" | grep -qiE "^- (feat|feature)"; then
            echo "RELEASE_TYPE=minor" >> $GITHUB_OUTPUT
          elif echo "$COMMITS" | grep -qiE "^- (fix|bugfix|patch)"; then
            echo "RELEASE_TYPE=patch" >> $GITHUB_OUTPUT
          elif echo "$COMMITS" | grep -qiE "^- (breaking|major)"; then
            echo "RELEASE_TYPE=major" >> $GITHUB_OUTPUT
          else
            echo "RELEASE_TYPE=patch" >> $GITHUB_OUTPUT
          fi

      - name: Calculate new version
        if: steps.check_version.outputs.NEEDS_RELEASE == 'true'
        id: calc_version
        run: |
          CURRENT="${{ steps.check_version.outputs.CURRENT_VERSION }}"
          TYPE="${{ steps.get_commits.outputs.RELEASE_TYPE }}"

          # Parse version
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"

          # Increment based on type
          if [ "$TYPE" == "major" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "$TYPE" == "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version will be: $NEW_VERSION (type: $TYPE)"

      - name: Update manifest.json
        if: steps.check_version.outputs.NEEDS_RELEASE == 'true'
        run: |
          NEW_VERSION="${{ steps.calc_version.outputs.NEW_VERSION }}"
          jq --arg version "$NEW_VERSION" '.version = $version' \
            custom_components/battery_energy_trading/manifest.json > manifest.tmp
          mv manifest.tmp custom_components/battery_energy_trading/manifest.json
          echo "Updated manifest.json to version $NEW_VERSION"

      - name: Update CHANGELOG.md
        if: steps.check_version.outputs.NEEDS_RELEASE == 'true'
        run: |
          NEW_VERSION="${{ steps.calc_version.outputs.NEW_VERSION }}"
          TODAY=$(date +%Y-%m-%d)

          # Create new changelog entry
          {
            echo "# Changelog"
            echo ""
            echo "All notable changes to this project will be documented in this file."
            echo ""
            echo "## [$NEW_VERSION] - $TODAY"
            echo ""
            echo "### Changes"
            echo ""
            echo "${{ steps.get_commits.outputs.COMMITS }}"
            echo ""
            tail -n +4 CHANGELOG.md 2>/dev/null || echo ""
          } > CHANGELOG.tmp
          mv CHANGELOG.tmp CHANGELOG.md
          echo "Updated CHANGELOG.md"

      - name: Commit version bump
        if: steps.check_version.outputs.NEEDS_RELEASE == 'true'
        run: |
          NEW_VERSION="${{ steps.calc_version.outputs.NEW_VERSION }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add custom_components/battery_energy_trading/manifest.json CHANGELOG.md
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
          git push

      - name: Create and push tag
        if: steps.check_version.outputs.NEEDS_RELEASE == 'true'
        run: |
          NEW_VERSION="${{ steps.calc_version.outputs.NEW_VERSION }}"
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
          git push origin "v$NEW_VERSION"
          echo "Created and pushed tag v$NEW_VERSION"

      - name: Summary
        if: steps.check_version.outputs.NEEDS_RELEASE == 'true'
        run: |
          echo "âœ… Auto-release completed!"
          echo "Version: ${{ steps.calc_version.outputs.NEW_VERSION }}"
          echo "Release type: ${{ steps.get_commits.outputs.RELEASE_TYPE }}"
          echo ""
          echo "The release workflow will now be triggered automatically by the tag."
